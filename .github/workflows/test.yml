name: Tests

on:
  push:
    branches:
      - 'main'

jobs:
  test-with-setup-ocaml:
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        ocaml-compiler:
          - '4.13.x'
    runs-on: ${{ matrix.os }}
    name: test-ocaml / ${{ matrix.os }}-${{ matrix.ocaml-compiler }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: OCaml ${{ matrix.ocaml-compiler }} with Dune cache
        uses: ocaml/setup-ocaml@v2
        if: ${{ !startsWith(matrix.os, 'windows-') }}
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: true
      - name: OCaml ${{ matrix.ocaml-compiler }} without Dune cache
        uses: ocaml/setup-ocaml@v2
        if: ${{ startsWith(matrix.os, 'windows-') }}
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: false
      - name: Install Opam dependencies
        run: opam install . --deps-only --with-test
      - name: Build OCaml
        run: opam exec -- dune build --display=short
      - name: Test OCaml
        run: opam exec -- dune runtest --display=short
      - name: Install dkml-c-probe
        run: opam exec -- dune install
      - name: Display Probe
        run: opam exec -- sh -c 'cat show_abi.ml | ocaml'


  setup-dkml:
    uses: 'diskuv/dkml-workflows/.github/workflows/setup-dkml.yml@v0'
    permissions: {} # remove all rights of GITHUB_TOKEN when it is passed to setup-dkml.yml
    with:
      ocaml-compiler: 4.12.1

  test-with-setup-dkml:
    needs: setup-dkml
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019 # 2019 has Visual Studio 2019
            host_target_abis: win32-windows_x86
            dkml-host-abi: windows_x86
            default_shell: msys2 {0}
            opam-root: D:/.opam
            bits: "32"
          - os: windows-2019 # 2019 has Visual Studio 2019
            host_target_abis: win32-windows_x86_64
            dkml-host-abi: windows_x86_64
            default_shell: msys2 {0}
            opam-root: D:/.opam
            bits: "64"
          - os: macos-latest
            host_target_abis: macos-darwin_all
            dkml-host-abi: darwin_x86_64
            default_shell: sh
            opam-root: /Users/runner/.opam
            bits: "64"
          - os: ubuntu-latest
            host_target_abis: manylinux2014-linux_x86
            bits: "32"
            default_shell: sh
            dkml-host-abi: linux_x86
            opam-root: .ci/opamroot # local directory of $GITHUB_WORKSPACE so available to dockcross
          - os: ubuntu-latest
            host_target_abis: manylinux2014-linux_x86_64
            bits: "64"
            default_shell: sh
            dkml-host-abi: linux_x86_64
            opam-root: .ci/opamroot # local directory of $GITHUB_WORKSPACE so available to dockcross
    runs-on: ${{ matrix.os }}
    name: test-dkml / ${{ matrix.host_target_abis }}
    defaults:
      run:
        shell: ${{ matrix.default_shell }}
    env:
      OPAMROOT: ${{ matrix.opam-root }}
      COMPONENT: dkml-component-staging-opam${{ matrix.bits }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          path: .ci/dist

      - name: Install MSYS2 (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows_')
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          # 1. xz is not for OCaml; just to get opam64.tar.xz from fdopen
          # 2. For Opam 2.0 from fdopen we need MSYS2/Cygwin tar that can handle
          #    Unix paths like /tmp.
          install: >-
            tree
            wget
            make
            pkg-config
            rsync
            diffutils
            patch
            unzip
            git
            xz
            tar

      - name: Import build environments from setup-dkml
        run: |
          ${{ needs.setup-dkml.outputs.import_func }}
          import ${{ matrix.host_target_abis }}

      - name: Cache Opam downloads by host
        uses: actions/cache@v2
        with:
          path: ${{ matrix.opam-root }}/download-cache
          key: ${{ matrix.dkml-host-abi }}

      - name: Install Opam dependencies
        run: opamrun install . --deps-only --with-test --yes
      - name: Build OCaml
        run: opamrun exec -- dune build --display=short
      - name: Test OCaml
        run: opamrun exec -- dune runtest --display=short
      - name: Install dkml-c-probe
        run: opamrun exec -- dune install
      - name: Display Probe
        run: opamrun exec -- sh -c 'cat show_abi.ml | ocaml'
